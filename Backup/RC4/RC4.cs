using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace RC4
{
    class RC4
    {

        byte[] S = new byte[256];//S-бокс(перестановка),содержит все возможные данные
        //счетчики
        int x = 0;
        int y = 0;

        public RC4(byte[] key)
        {
            Init(key);
        }

        
      


        //Инициализация вектора-перестановки ключем
        //Этот алгоритм использует ключ, сохраненный в Key, и имеющий длину L байт. 
        //Инициализация начинается с заполнения массива S, далее этот массив перемешивается путем 
        //перестановок определяемых ключом. Так как только одно действие выполняется над S, то
        //должно выполняться утверждение, что S всегда содержит все значения кодового слова.
        public void Init(byte[] key)
        {
            int KeyLength = key.Length;//длина ключа
            byte temp;
            //начальное заполнение массива
            for (int i = 0; i < 256; i++)
            {
                S[i] = (byte)i;
            }

            //скрэмблирование элементов(перемешивание массива)
            int j = 0;
            for (int i = 0; i < 256; i++)//изменение каждого элемента
            {
                j = (j + S[i] + key[i % KeyLength]) % 256;//элементы изменяются случайным образом
               // S.Swap(i, j);
                temp = S[i];
                S[i] = S[j];
                S[j] = temp;
   
            }

        }

        /// Вывод одного псевдослучайного байта :
        /// Генератор ключевого потока RC4 переставляет значения, хранящиеся в S, и каждый раз выбирает различное
        /// значение из S в качестве результата. В одном цикле RC4 определяется одно n-битное слово K из ключевого
        /// потока, которое в последующем суммируется с исходным текстом для получения зашифрованного текста. 
        /// Эта часть алгоритма называется генератором псевдослучайной последовательности
        private byte KeyItem()
        {
            byte temp;
            x = (x + 1) % 256;
            y = (y + S[x]) % 256;
            temp = S[y];
            S[y] = S[x];
            S[x] = temp;
            return S[(S[x] + S[y]) % 256];
        }
        

        //кодирование
        //для каждого байта массива\потока входных незашифрованных данных запрвшиваем байт ключа и объединяем их при помощи xor(^)
        public byte[] Encode(byte[] dataB, int size)
        {
            byte[] data = dataB.Take(size).ToArray();
            byte[] cipher = new byte[data.Length];
            for (int m = 0; m < data.Length; m++)
            {
                cipher[m] = (byte)(data[m] ^ KeyItem());
            }
            return cipher;

        }

        public byte[] Decode(byte[] dataB, int size)//декодирование
        {
            return Encode(dataB, size);
        }
    }
}
